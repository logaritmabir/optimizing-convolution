"ID","Process ID","Process Name","Host Name","Kernel Name","Context","Stream","Block Size","Grid Size","Device","CC","Section Name","Metric Name","Metric Unit","Metric Value","Rule Name","Rule Type","Rule Description","Estimated Speedup Type","Estimated Speedup"
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,99",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,46",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","1.249.450",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","73,53",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","13,39",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","855,33",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","82,17",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","15,29",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","1.116.071,46",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","73,53",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","INF","Compute and Memory are well-balanced: To reduce runtime, both computation and memory traffic must be reduced. Check both the Compute Workload Analysis and Memory Workload Analysis sections.","",""
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1,27",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,14",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","31,80",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1,27",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","31,80",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (22.5%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","38,46",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","37,28",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","73,53",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","83,29",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","86,07",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","73,53",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 1.3 sectors per request, or 1.3*32 = 42.6 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","0.6785"
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.3 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","7.966"
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.0 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request.","global","2.749"
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","32,93",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,33",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","67,07",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,45",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1,36",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 3.0 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.45 active warps per scheduler, but only an average of 1.36 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","26.47"
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","22,62",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","22,63",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,99",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31,50",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 13.1 cycles being stalled waiting for the L1 instruction queue for local and global (LG) memory operations to be not full. Typically, this stall occurs only when executing local or global memory instructions extremely frequently. Avoid redundant global memory accesses. Try to avoid using thread-local memory by checking if dynamically indexed arrays are declared in local scope, of if the kernel has excessive register pressure causing by spills. If applicable, consider combining multiple lower-width memory operations into fewer wider memory operations and try interleaving memory operations and math instructions. This stall type represents about 57.7% of the total average of 22.6 cycles between issuing two instructions.","global","26.47"
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","354.858,67",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","34.066.432",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","354.906,67",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","34.071.040",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Grid Size","","16.384",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","28",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Threads","thread","16.777.216",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","682,67",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","2",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","16",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","90,97",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","29,11",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,03",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.048.320",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","0",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","0",
"0","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_global(const unsigned char *, unsigned char *, int, int)","1","7","(32, 32, 1)","(128, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 3119628 excessive sectors (24% of the total 13076236 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","23.73"
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,98",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,46",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","769.044",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","71,12",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","21,72",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","527,10",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","79,49",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","26,65",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","702.520",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","71,12",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","INF","Compute and Memory are well-balanced: To reduce runtime, both computation and memory traffic must be reduced. Check both the Compute Workload Analysis and Memory Workload Analysis sections.","",""
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1,49",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,37",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","37,31",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1,49",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","37,31",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.3%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","62,40",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","39,75",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","71,12",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","85,50",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","76,31",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","71,12",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 1.9 sectors per request, or 1.9*32 = 59.3 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","1.755"
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 2.0 sectors per request, or 2.0*32 = 64.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","1.907"
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.4 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","8.177"
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.0 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request.","global","5.95"
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","38,70",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,39",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","61,30",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,51",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1,44",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.6 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.51 active warps per scheduler, but only an average of 1.44 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","28.88"
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","19,40",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","19,40",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,98",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31,32",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 9.2 cycles being stalled waiting for the L1 instruction queue for local and global (LG) memory operations to be not full. Typically, this stall occurs only when executing local or global memory instructions extremely frequently. Avoid redundant global memory accesses. Try to avoid using thread-local memory by checking if dynamically indexed arrays are declared in local scope, of if the kernel has excessive register pressure causing by spills. If applicable, consider combining multiple lower-width memory operations into fewer wider memory operations and try interleaving memory operations and math instructions. This stall type represents about 47.3% of the total average of 19.4 cycles between issuing two instructions.","global","28.88"
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","262.040",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","25.155.840",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","262.088",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","25.160.448",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Grid Size","","8.192",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","29",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Threads","thread","8.388.608",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","341,33",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","2",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","16",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","91,47",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","29,27",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,03",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","786.176",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","0",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","0",
"1","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_global(const unsigned char *, unsigned char *, int, int)","2","14","(32, 32, 1)","(64, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 5215756 excessive sectors (46% of the total 11242124 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","46.18"
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,96",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,45",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","514.105",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","70,19",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","32,49",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","354,08",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","87,55",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","50,54",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","477.228",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","70,19",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","INF","Compute and Memory are well-balanced: To reduce runtime, both computation and memory traffic must be reduced. Check both the Compute Workload Analysis and Memory Workload Analysis sections.","",""
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1,86",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,73",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","46,62",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1,86",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","46,62",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (44.6%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","92,92",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","49,63",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","70,19",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","89,97",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","83,23",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","70,19",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 3.2 sectors per request, or 3.2*32 = 102.9 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","4.708"
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 4.0 sectors per request, or 4.0*32 = 128.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","5.125"
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.0 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","6.942"
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","47,15",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,47",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","52,85",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,36",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1,63",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.1 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.36 active warps per scheduler, but only an average of 1.63 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","29.81"
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","15,61",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","15,61",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,97",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31,18",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 5.3 cycles being stalled waiting for the L1 instruction queue for local and global (LG) memory operations to be not full. Typically, this stall occurs only when executing local or global memory instructions extremely frequently. Avoid redundant global memory accesses. Try to avoid using thread-local memory by checking if dynamically indexed arrays are declared in local scope, of if the kernel has excessive register pressure causing by spills. If applicable, consider combining multiple lower-width memory operations into fewer wider memory operations and try interleaving memory operations and math instructions. This stall type represents about 34.1% of the total average of 15.6 cycles between issuing two instructions.","global","29.81"
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","222.452,67",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","21.355.456",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","222.500,67",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","21.360.064",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Grid Size","","4.096",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","30",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Threads","thread","4.194.304",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","170,67",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","2",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","16",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","91,62",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","29,32",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,04",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","917.120",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","100",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","0",
"2","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_global(const unsigned char *, unsigned char *, int, int)","3","21","(32, 32, 1)","(32, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 9408012 excessive sectors (70% of the total 13469260 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","68.3"
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,93",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,44",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","611.077",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","78,08",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","27,33",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","422,78",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","93,37",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","78,08",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","591.095,62",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","43,83",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","OPT","Memory is more heavily utilized than Compute: Look at the Memory Workload Analysis section to identify the L2 bottleneck. Check memory replay (coalescing) metrics to make sure you're efficiently utilizing the bytes transferred. Also consider whether it is possible to do more work per memory access (kernel fusion) or whether there are values you can (re)compute.","",""
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1,40",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,36",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","34,99",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1,40",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","37,40",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (37.4%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","77,80",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","69,70",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","78,08",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","94,20",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","89,53",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","43,83",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 6.5 sectors per request, or 6.5*32 = 208.9 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","7.542"
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.0 sectors per request, or 8.0*32 = 256.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","7.792"
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.5 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","3.565"
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","35,48",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,35",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","64,52",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,64",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0,95",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.64 active warps per scheduler, but only an average of 0.95 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","21.92"
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","21,54",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","21,54",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,94",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31,09",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 10.8 cycles being stalled waiting for the L1 instruction queue for local and global (LG) memory operations to be not full. Typically, this stall occurs only when executing local or global memory instructions extremely frequently. Avoid redundant global memory accesses. Try to avoid using thread-local memory by checking if dynamically indexed arrays are declared in local scope, of if the kernel has excessive register pressure causing by spills. If applicable, consider combining multiple lower-width memory operations into fewer wider memory operations and try interleaving memory operations and math instructions. This stall type represents about 50.3% of the total average of 21.5 cycles between issuing two instructions.","global","21.92"
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","206.753",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","19.848.288",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","206.801",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","19.852.896",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Grid Size","","2.048",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","29",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Threads","thread","2.097.152",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","85,33",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","2",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","16",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","94,65",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","30,29",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,05",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","982.592",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","100",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","0",
"3","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_global(const unsigned char *, unsigned char *, int, int)","4","28","(32, 32, 1)","(16, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 17792524 excessive sectors (85% of the total 20871212 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","84.68"
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,96",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,45",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","797.268",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","87,98",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","20,96",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","548,80",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","83,89",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","87,98",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","776.078,96",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","30,64",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing L2 in the Memory Workload Analysis section.","",""
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1,08",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,05",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","26,95",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1,08",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","29,98",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (30.0%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","59,94",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","75,95",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","87,98",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","95,96",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","92,53",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","30,64",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.9 sectors per request, or 9.9*32 = 315.7 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","8.51"
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 11.6 sectors per request, or 11.6*32 = 372.4 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","8.656"
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","2.038"
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","27,10",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,27",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","72,90",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,61",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0,68",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 3.7 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.61 active warps per scheduler, but only an average of 0.68 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","12.02"
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","28,09",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","28,10",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","30,94",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","30,11",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 14.7 cycles being stalled waiting for the L1 instruction queue for local and global (LG) memory operations to be not full. Typically, this stall occurs only when executing local or global memory instructions extremely frequently. Avoid redundant global memory accesses. Try to avoid using thread-local memory by checking if dynamically indexed arrays are declared in local scope, of if the kernel has excessive register pressure causing by spills. If applicable, consider combining multiple lower-width memory operations into fewer wider memory operations and try interleaving memory operations and math instructions. This stall type represents about 52.5% of the total average of 28.1 cycles between issuing two instructions.","global","12.02"
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","209.096,65",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","20.073.278",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","209.144,65",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","20.077.886",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Grid Size","","1.408",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","32",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Threads","thread","1.441.792",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","58,67",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","2",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","16",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","94,85",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","30,35",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,05",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.068.556",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","92,73",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","341,17",
"4","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_global(const unsigned char *, unsigned char *, int, int)","5","35","(32, 32, 1)","(11, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 26111532 excessive sectors (90% of the total 28948674 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","89.67"
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,97",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,45",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","1.095.648",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","84,85",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","15,28",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","752,13",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","84,36",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","84,85",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","1.073.261,17",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","20,97",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing L2 in the Memory Workload Analysis section.","",""
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0,75",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0,74",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","18,73",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0,75",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","21,36",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (21.4%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","43,76",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","71,89",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","84,85",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","96,91",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","94,26",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","20,22",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 13.9 sectors per request, or 13.9*32 = 445.9 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","8.211"
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 16.0 sectors per request, or 16.0*32 = 512.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","8.293"
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 3.1 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","1.139"
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","18,99",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,19",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","81,01",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,75",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0,37",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.75 active warps per scheduler, but only an average of 0.37 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","15.15"
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","40,82",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","40,83",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,87",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31,01",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 24.5 cycles being stalled waiting for the L1 instruction queue for local and global (LG) memory operations to be not full. Typically, this stall occurs only when executing local or global memory instructions extremely frequently. Avoid redundant global memory accesses. Try to avoid using thread-local memory by checking if dynamically indexed arrays are declared in local scope, of if the kernel has excessive register pressure causing by spills. If applicable, consider combining multiple lower-width memory operations into fewer wider memory operations and try interleaving memory operations and math instructions. This stall type represents about 60.0% of the total average of 40.8 cycles between issuing two instructions.","global","15.15"
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","200.950,17",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","19.291.216",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","200.998,17",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","19.295.824",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Grid Size","","1.024",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","33",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Threads","thread","1.048.576",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","42,67",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","1",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","16",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","95,96",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","30,71",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,05",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.015.328",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","100",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","0",
"5","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_global(const unsigned char *, unsigned char *, int, int)","6","42","(32, 32, 1)","(8, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 34549266 excessive sectors (93% of the total 37136674 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","92.64"
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,93",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,44",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","745.570",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","70,35",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","22,39",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","515,74",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","77,33",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","19,07",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","677.655,33",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","70,35",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","INF","Compute and Memory are well-balanced: To reduce runtime, both computation and memory traffic must be reduced. Check both the Compute Workload Analysis and Memory Workload Analysis sections.","",""
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1,61",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,47",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","40,29",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1,61",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","40,29",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (33.8%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","63,78",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","38,03",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","70,35",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","84,80",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","68,13",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","70,35",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 1.9 sectors per request, or 1.9*32 = 59.3 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 33.5 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","1.633"
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 2.0 sectors per request, or 2.0*32 = 64.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 33.5 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","1.788"
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.4 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","8.56"
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.0 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request.","global","3.066"
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","41,48",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,41",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","58,52",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,54",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1,56",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.4 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.54 active warps per scheduler, but only an average of 1.56 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","29.65"
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","18,19",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","18,19",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,98",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31,34",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 8.6 cycles being stalled waiting for the L1 instruction queue for local and global (LG) memory operations to be not full. Typically, this stall occurs only when executing local or global memory instructions extremely frequently. Avoid redundant global memory accesses. Try to avoid using thread-local memory by checking if dynamically indexed arrays are declared in local scope, of if the kernel has excessive register pressure causing by spills. If applicable, consider combining multiple lower-width memory operations into fewer wider memory operations and try interleaving memory operations and math instructions. This stall type represents about 47.3% of the total average of 18.2 cycles between issuing two instructions.","global","29.65"
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","272.999,98",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","26.207.998",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","273.047,98",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","26.212.606",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Grid Size","","8.192",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","32",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Threads","thread","8.388.608",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","341,33",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","2",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","16",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","92,60",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","29,63",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,04",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.052.286",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","98,44",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","42,65",
"6","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_global(const unsigned char *, unsigned char *, int, int)","7","49","(32, 32, 1)","(64, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 4691724 excessive sectors (44% of the total 10718092 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","43.54"
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,95",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,45",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","501.538",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","65,41",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","33,21",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","346,02",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","72,88",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","23,50",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","465.676,21",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","65,41",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","INF","Compute and Memory are well-balanced: To reduce runtime, both computation and memory traffic must be reduced. Check both the Compute Workload Analysis and Memory Workload Analysis sections.","",""
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1,98",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,84",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","49,55",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1,98",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","50,99",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (51.0%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","94,85",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","36,44",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","65,41",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","88,65",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","61,79",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","65,41",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.1 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 3.2 sectors per request, or 3.2*32 = 102.9 bytes of cache data transfers per request. The optimal thread address pattern for 1.1 byte accesses would result in 1.1*32 = 35.4 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","4.057"
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.1 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 4.0 sectors per request, or 4.0*32 = 128.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.1 byte accesses would result in 1.1*32 = 35.4 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","4.475"
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.0 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","7.114"
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","50,60",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,51",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","49,40",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,50",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","2,11",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.0 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.50 active warps per scheduler, but only an average of 2.11 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","34.59"
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","14,82",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","14,82",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,96",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31,21",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.7 cycles being stalled waiting for the L1 instruction queue for local and global (LG) memory operations to be not full. Typically, this stall occurs only when executing local or global memory instructions extremely frequently. Avoid redundant global memory accesses. Try to avoid using thread-local memory by checking if dynamically indexed arrays are declared in local scope, of if the kernel has excessive register pressure causing by spills. If applicable, consider combining multiple lower-width memory operations into fewer wider memory operations and try interleaving memory operations and math instructions. This stall type represents about 32.0% of the total average of 14.8 cycles between issuing two instructions.","global","32.02"
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","230.683,31",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","22.145.598",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","230.731,31",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","22.150.206",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Grid Size","","4.096",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","31",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Threads","thread","4.194.304",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","170,67",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","2",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","16",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","92,61",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","29,64",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,05",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.052.222",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","98,96",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","42,65",
"7","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_global(const unsigned char *, unsigned char *, int, int)","8","56","(32, 32, 1)","(32, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 7835916 excessive sectors (66% of the total 11897164 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","64.6"
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,94",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,45",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","457.883",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","51,33",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","36,39",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","316,42",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","93,93",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","25,17",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","436.887,79",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","53,42",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1,95",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,86",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","48,75",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1,95",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","55,91",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (55.9%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","103,67",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","46,96",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","51,33",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","93,17",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","61,23",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","51,33",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.1 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 6.5 sectors per request, or 6.5*32 = 208.9 bytes of cache data transfers per request. The optimal thread address pattern for 1.1 byte accesses would result in 1.1*32 = 36.7 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","8.323"
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.1 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.0 sectors per request, or 8.0*32 = 256.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.1 byte accesses would result in 1.1*32 = 36.7 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","8.649"
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.5 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","4.76"
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","49,77",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,50",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","50,23",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,68",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","2,09",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.0 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.68 active warps per scheduler, but only an average of 2.09 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","46.58"
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","15,44",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","15,44",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,93",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31,11",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 4.9 cycles being stalled waiting for the L1 instruction queue for local and global (LG) memory operations to be not full. Typically, this stall occurs only when executing local or global memory instructions extremely frequently. Avoid redundant global memory accesses. Try to avoid using thread-local memory by checking if dynamically indexed arrays are declared in local scope, of if the kernel has excessive register pressure causing by spills. If applicable, consider combining multiple lower-width memory operations into fewer wider memory operations and try interleaving memory operations and math instructions. This stall type represents about 31.9% of the total average of 15.4 cycles between issuing two instructions.","global","31.94"
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","212.936,65",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","20.441.918",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","212.984,65",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","20.446.526",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Grid Size","","2.048",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","36",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Threads","thread","2.097.152",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","85,33",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","1",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","16",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","94,39",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","30,20",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,05",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.052.190",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","99,11",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","42,65",
"8","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_global(const unsigned char *, unsigned char *, int, int)","9","63","(32, 32, 1)","(16, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 14648332 excessive sectors (83% of the total 17727020 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","77.71"
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,91",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,44",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","372.605",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","56,43",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","44,63",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","259,10",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","70,03",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","28,59",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","357.179,04",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","68,78",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","OPT","Compute is more heavily utilized than Memory: Look at the Compute Workload Analysis section to see what the compute pipelines are spending their time doing. Also, consider whether any computation is redundant and could be reduced or moved to look-up tables.","",""
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","2,39",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","2,30",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","59,88",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","2,40",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","71,71",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","ALU is the highest-utilized pipeline (71.7%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. The pipeline is well-utilized, but might become a bottleneck if more work is added. Based on the number of executed instructions, the highest utilized pipeline (71.7%) is ALU. It executes integer and logic operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","126,67",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","35,01",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","56,43",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","95,16",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","57,66",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","56,43",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.2 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 9.9 sectors per request, or 9.9*32 = 315.7 bytes of cache data transfers per request. The optimal thread address pattern for 1.2 byte accesses would result in 1.2*32 = 37.3 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","14.95"
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.2 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 11.7 sectors per request, or 11.7*32 = 374.3 bytes of cache data transfers per request. The optimal thread address pattern for 1.2 byte accesses would result in 1.2*32 = 37.3 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","15.26"
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","4.358"
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","60,83",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,61",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","39,17",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,69",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","2,89",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","12,64",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","12,64",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","30,94",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","30,13",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","213.830,33",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","20.527.712",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","213.878,33",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","20.532.320",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Grid Size","","1.408",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","38",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Threads","thread","1.441.792",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","58,67",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","1",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","16",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","94,90",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","30,37",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,05",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.117.684",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","92,56",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","383,81",
"9","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_global(const unsigned char *, unsigned char *, int, int)","10","70","(32, 32, 1)","(11, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 21415714 excessive sectors (88% of the total 24240574 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","82.19"
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,98",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,46",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","688.141",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","49,35",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","24,25",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","472,10",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","98,69",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","22,95",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","671.873,08",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","36,33",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1,21",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,18",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","30,23",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1,21",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","37,17",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (37.2%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","69,56",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","49,35",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","27,40",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","96,29",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","70,26",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","27,40",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.2 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 13.9 sectors per request, or 13.9*32 = 445.9 bytes of cache data transfers per request. The optimal thread address pattern for 1.2 byte accesses would result in 1.2*32 = 37.7 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","10.7"
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.2 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 16.0 sectors per request, or 16.0*32 = 512.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.2 byte accesses would result in 1.2*32 = 37.7 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","10.83"
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 3.1 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","1.81"
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","30,61",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,31",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","69,39",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,73",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0,65",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 3.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.73 active warps per scheduler, but only an average of 0.65 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","50.65"
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","25,25",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","25,26",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,87",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31,01",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 15.4 cycles being stalled waiting for the L1 instruction queue for local and global (LG) memory operations to be not full. Typically, this stall occurs only when executing local or global memory instructions extremely frequently. Avoid redundant global memory accesses. Try to avoid using thread-local memory by checking if dynamically indexed arrays are declared in local scope, of if the kernel has excessive register pressure causing by spills. If applicable, consider combining multiple lower-width memory operations into fewer wider memory operations and try interleaving memory operations and math instructions. This stall type represents about 60.8% of the total average of 25.3 cycles between issuing two instructions.","global","50.65"
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","203.039,81",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","19.491.822",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","203.087,81",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","19.496.430",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Grid Size","","1.024",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","44",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Threads","thread","1.048.576",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","42,67",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","1",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","16",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","95,50",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","30,56",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,05",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.052.174",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","99,17",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","42,65",
"10","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_global(const unsigned char *, unsigned char *, int, int)","11","77","(32, 32, 1)","(8, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 28260882 excessive sectors (92% of the total 30848290 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","66.66"
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,94",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,45",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","1.025.470",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","51,20",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","16,31",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","708",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","58,77",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","18,62",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","891.803,42",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","51,20",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1,59",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,39",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","39,80",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1,59",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","39,80",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (20.8%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","46,48",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","26,33",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","51,20",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","73,88",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","86,06",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","51,20",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 1.7 sectors per request, or 1.7*32 = 53.2 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","0.8468"
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.3 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","9.645"
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.0 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request.","global","3.348"
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","40,55",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,41",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","59,45",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,40",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1,36",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.5 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.40 active warps per scheduler, but only an average of 1.36 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","48.8"
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","18,25",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","18,25",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,99",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31,50",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 5.7 cycles being stalled waiting for the L1 instruction queue for local and global (LG) memory operations to be not full. Typically, this stall occurs only when executing local or global memory instructions extremely frequently. Avoid redundant global memory accesses. Try to avoid using thread-local memory by checking if dynamically indexed arrays are declared in local scope, of if the kernel has excessive register pressure causing by spills. If applicable, consider combining multiple lower-width memory operations into fewer wider memory operations and try interleaving memory operations and math instructions. This stall type represents about 31.2% of the total average of 18.2 cycles between issuing two instructions.","global","31.22"
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","354.858,67",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","34.066.432",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","354.910,75",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","34.071.432",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Grid Size","","16.384",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","20",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Threads","thread","16.777.216",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","682,67",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","2",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","16",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","92,10",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","29,47",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,03",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.048.320",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","0",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","0",
"11","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_constant(const unsigned char *, unsigned char *, int, int)","12","84","(32, 32, 1)","(128, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 3119628 excessive sectors (37% of the total 8359948 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","35.69"
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,94",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,45",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","697.691",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","50,17",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","23,96",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","481,89",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","60,42",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","29,63",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","627.948,88",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","50,17",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1,69",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,52",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","42,17",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1,69",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","42,17",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (26.1%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","68,26",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","30,21",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","50,17",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","81,66",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","76,14",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","50,17",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 2.5 sectors per request, or 2.5*32 = 79.8 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","1.989"
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 2.0 sectors per request, or 2.0*32 = 64.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","1.661"
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.4 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","9.105"
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.0 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request.","global","6.561"
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","42,94",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,43",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","57,06",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,30",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1,18",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.30 active warps per scheduler, but only an average of 1.18 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","49.83"
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","17,01",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","17,01",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,98",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31,32",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 7.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 46.2% of the total average of 17.0 cycles between issuing two instructions.","global","46.23"
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","264.769,33",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","25.417.856",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","264.821,79",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","25.422.892",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Grid Size","","8.192",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","22",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Threads","thread","8.388.608",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","341,33",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","2",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","16",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","90,84",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","29,07",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,03",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","786.176",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","0",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","0",
"12","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_constant(const unsigned char *, unsigned char *, int, int)","13","91","(32, 32, 1)","(64, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 5215756 excessive sectors (59% of the total 8883980 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","58.54"
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,91",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,44",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","461.407",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","56,85",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","36,16",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","320,54",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","76,84",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","56,79",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","425.746,50",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","56,85",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","2,15",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,99",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","53,86",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","2,15",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","53,86",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (40.4%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","102,62",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","55,25",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","56,85",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","89,01",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","82,41",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","56,85",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 4.3 sectors per request, or 4.3*32 = 138.3 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","5.337"
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 4.0 sectors per request, or 4.0*32 = 128.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","5.208"
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.0 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","7.73"
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","54,80",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,55",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","45,20",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,17",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1,51",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 1.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.17 active warps per scheduler, but only an average of 1.51 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","43.15"
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","13,08",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","13,09",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,97",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31,21",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 5.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 43.8% of the total average of 13.1 cycles between issuing two instructions.","global","43.15"
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","229.276",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","22.010.496",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","229.327,98",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","22.015.486",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Grid Size","","4.096",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","24",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Threads","thread","4.194.304",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","170,67",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","2",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","16",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","89,08",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","28,50",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (89.1%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","10.92"
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,04",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","917.120",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","100",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","0",
"13","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_constant(const unsigned char *, unsigned char *, int, int)","14","98","(32, 32, 1)","(32, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 9408012 excessive sectors (77% of the total 12290188 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","76.31"
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,93",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,44",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","574.593",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","82,80",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","29,10",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","397,38",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","89,86",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","82,80",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","552.298,71",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","38,05",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing L2 in the Memory Workload Analysis section.","",""
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1,55",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,49",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","38,80",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1,55",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","38,80",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (33.4%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","82,82",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","74,19",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","82,80",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","94,03",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","89,35",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","38,05",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.2 sectors per request, or 8.2*32 = 262.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","8.08"
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.0 sectors per request, or 8.0*32 = 256.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","8.054"
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.5 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","3.793"
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","39,06",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,39",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","60,94",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,37",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0,86",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.6 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.37 active warps per scheduler, but only an average of 0.86 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","17.2"
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","18,87",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","18,87",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,94",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31,12",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 8.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 45.9% of the total average of 18.9 cycles between issuing two instructions.","global","17.2"
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","214.258,67",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","20.568.832",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","214.310,54",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","20.573.812",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Grid Size","","2.048",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","24",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Threads","thread","2.097.152",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","85,33",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","2",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","16",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","91,50",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","29,28",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,05",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","982.592",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","100",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","0",
"14","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_constant(const unsigned char *, unsigned char *, int, int)","15","105","(32, 32, 1)","(16, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 17792524 excessive sectors (88% of the total 20281676 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","87.28"
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,94",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,45",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","801.434",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","87,63",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","20,85",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","553,86",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","83,56",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","87,63",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","782.004,42",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","26,87",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing L2 in the Memory Workload Analysis section.","",""
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1,10",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,07",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","27,53",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1,10",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","27,53",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (25.1%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","59,40",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","75,48",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","87,63",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","95,90",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","92,49",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","26,24",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 11.8 sectors per request, or 11.8*32 = 376.5 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","8.492"
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 11.6 sectors per request, or 11.6*32 = 372.4 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","8.483"
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","2.025"
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","27,62",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,28",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","72,38",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,44",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0,61",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 3.6 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.44 active warps per scheduler, but only an average of 0.61 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","12.37"
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","26,95",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","26,96",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","30,94",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","30,13",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 13.4 cycles being stalled waiting for the L1 instruction queue for local and global (LG) memory operations to be not full. Typically, this stall occurs only when executing local or global memory instructions extremely frequently. Avoid redundant global memory accesses. Try to avoid using thread-local memory by checking if dynamically indexed arrays are declared in local scope, of if the kernel has excessive register pressure causing by spills. If applicable, consider combining multiple lower-width memory operations into fewer wider memory operations and try interleaving memory operations and math instructions. This stall type represents about 49.6% of the total average of 27.0 cycles between issuing two instructions.","global","12.37"
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 8.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 33.0% of the total average of 27.0 cycles between issuing two instructions.","global","12.37"
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","215.195",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","20.658.720",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","215.248,44",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","20.663.850",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Grid Size","","1.408",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","25",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Threads","thread","1.441.792",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","58,67",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","2",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","16",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","92,91",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","29,73",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,05",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.068.556",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","92,73",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","341,17",
"15","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_constant(const unsigned char *, unsigned char *, int, int)","16","112","(32, 32, 1)","(11, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 26111532 excessive sectors (91% of the total 28543368 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","91.42"
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,93",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,45",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","1.084.458",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","85,71",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","15,42",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","748,70",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","81,86",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","85,71",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","1.061.119,58",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","19,11",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing L2 in the Memory Workload Analysis section.","",""
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0,78",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0,76",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","19,49",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0,78",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","19,49",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","81.67"
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","43,93",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","72,59",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","85,71",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","96,90",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","94,23",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","18,16",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 16.1 sectors per request, or 16.1*32 = 514.9 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","8.314"
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 16.0 sectors per request, or 16.0*32 = 512.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","8.311"
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 3.1 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","1.139"
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","19,58",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,20",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","80,42",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,65",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0,35",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.1 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.65 active warps per scheduler, but only an average of 0.35 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.29"
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","39,05",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","39,06",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,87",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31,03",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 19.9 cycles being stalled waiting for the L1 instruction queue for local and global (LG) memory operations to be not full. Typically, this stall occurs only when executing local or global memory instructions extremely frequently. Avoid redundant global memory accesses. Try to avoid using thread-local memory by checking if dynamically indexed arrays are declared in local scope, of if the kernel has excessive register pressure causing by spills. If applicable, consider combining multiple lower-width memory operations into fewer wider memory operations and try interleaving memory operations and math instructions. This stall type represents about 50.9% of the total average of 39.0 cycles between issuing two instructions.","global","14.29"
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 15.2 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 38.9% of the total average of 39.0 cycles between issuing two instructions.","global","14.29"
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","206.750",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","19.848.000",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","206.807,20",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","19.853.491",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Grid Size","","1.024",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","25",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Threads","thread","1.048.576",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","42,67",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","2",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","16",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","94,81",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","30,34",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,05",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.015.328",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","100",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","0",
"16","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_constant(const unsigned char *, unsigned char *, int, int)","17","119","(32, 32, 1)","(8, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 34549266 excessive sectors (94% of the total 36841906 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","93.41"
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,93",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,44",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","679.285",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","48,27",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","24,59",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","469,98",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","53,91",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","20,91",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","609.638,12",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","48,27",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1,81",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,63",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","45,24",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1,81",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","45,24",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (29.6%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","69,99",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","26,95",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","48,27",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","80,53",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","68,16",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","48,27",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.1 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 2.5 sectors per request, or 2.5*32 = 79.8 bytes of cache data transfers per request. The optimal thread address pattern for 1.1 byte accesses would result in 1.1*32 = 34.5 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","1.822"
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.1 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 2.0 sectors per request, or 2.0*32 = 64.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.1 byte accesses would result in 1.1*32 = 34.5 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","1.481"
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.3 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","9.437"
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.0 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request.","global","3.368"
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","45,92",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,46",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","54,08",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,30",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1,30",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.2 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.30 active warps per scheduler, but only an average of 1.30 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","51.73"
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","15,91",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","15,91",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,98",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31,35",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 7.3 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 46.0% of the total average of 15.9 cycles between issuing two instructions.","global","45.99"
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","275.729,31",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","26.470.014",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","275.781,19",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","26.474.994",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Grid Size","","8.192",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","23",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Threads","thread","8.388.608",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","341,33",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","2",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","16",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","91,22",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","29,19",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,04",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.052.286",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","98,44",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","42,65",
"17","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_constant(const unsigned char *, unsigned char *, int, int)","18","126","(32, 32, 1)","(64, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 4691724 excessive sectors (56% of the total 8359948 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","54.97"
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,97",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,45",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","444.854",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","51,62",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","37,46",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","305,76",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","59,34",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","26,50",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","406.561,75",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","52,25",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","2,28",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","2,09",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","57,09",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","2,28",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","57,09",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (47.0%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","107,37",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","29,67",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","51,62",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","87,40",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","61,72",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","51,62",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.2 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 4.3 sectors per request, or 4.3*32 = 138.3 bytes of cache data transfers per request. The optimal thread address pattern for 1.2 byte accesses would result in 1.2*32 = 37.1 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","4.601"
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.2 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 4.0 sectors per request, or 4.0*32 = 128.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.2 byte accesses would result in 1.2*32 = 37.1 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","4.465"
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.0 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","8.02"
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","58,65",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,59",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","41,35",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,47",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1,82",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 1.7 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.47 active warps per scheduler, but only an average of 1.82 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","41.35"
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","12,73",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","12,74",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,96",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31,21",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 5.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 39.1% of the total average of 12.7 cycles between issuing two instructions.","global","39.07"
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","232.047,98",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","22.276.606",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","232.103,46",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","22.281.932",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Grid Size","","4.096",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","24",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Threads","thread","4.194.304",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","170,67",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","2",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","16",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","91,40",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","29,25",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,05",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.052.222",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","98,96",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","42,65",
"18","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_constant(const unsigned char *, unsigned char *, int, int)","19","133","(32, 32, 1)","(32, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 7835916 excessive sectors (73% of the total 10718092 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","71.57"
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,92",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,44",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","415.140",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","45,98",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","40,15",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","287,36",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","91,96",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","27,55",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","395.457,29",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","52,56",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","2,20",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","2,10",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","55,07",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","2,20",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","55,07",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (52.5%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","114,17",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","45,98",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","44,80",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","92,93",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","60,22",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","44,80",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.2 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.2 sectors per request, or 8.2*32 = 262.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.2 byte accesses would result in 1.2*32 = 38.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","9.21"
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.2 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.0 sectors per request, or 8.0*32 = 256.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.2 byte accesses would result in 1.2*32 = 38.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","9.173"
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.5 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","5.248"
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","55,95",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,56",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","44,05",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,35",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1,70",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 1.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.35 active warps per scheduler, but only an average of 1.70 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","44.05"
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","13,13",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","13,14",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,93",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31,13",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 5.1 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 39.1% of the total average of 13.1 cycles between issuing two instructions.","global","39.07"
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","217.712,98",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","20.900.446",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","217.775,15",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","20.906.414",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Grid Size","","2.048",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","29",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Threads","thread","2.097.152",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","85,33",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","2",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","16",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","90,99",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","29,12",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,05",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.052.190",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","99,11",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","42,65",
"19","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_constant(const unsigned char *, unsigned char *, int, int)","20","140","(32, 32, 1)","(16, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 14648332 excessive sectors (85% of the total 17137484 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","80.96"
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,90",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,43",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","332.106",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","53,16",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","50,07",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","231,23",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","69,48",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","32,75",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","317.772,79",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","65,88",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","OPT","Compute is more heavily utilized than Memory: Look at the Compute Workload Analysis section to see what the compute pipelines are spending their time doing. Also, consider whether any computation is redundant and could be reduced or moved to look-up tables.","",""
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","2,75",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","2,63",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","68,78",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","2,75",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","68,79",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","ALU is the highest-utilized pipeline (68.8%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. The pipeline is well-utilized, but might become a bottleneck if more work is added. Based on the number of executed instructions, the highest utilized pipeline (68.8%) is ALU. It executes integer and logic operations. Comparing the two, the overall pipeline utilization appears to be caused by frequent, low-latency instructions. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder) or hover over the pipeline name to understand the workloads handled by each pipeline. The Instruction Statistics section shows the mix of executed instructions in this kernel. Check the Warp State Statistics section for which reasons cause warps to stall.","",""
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","141,88",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","34,74",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","53,16",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","95,08",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","58,24",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","53,16",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.2 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 11.8 sectors per request, or 11.8*32 = 376.5 bytes of cache data transfers per request. The optimal thread address pattern for 1.2 byte accesses would result in 1.2*32 = 38.4 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","16.8"
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.2 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 11.7 sectors per request, or 11.7*32 = 374.3 bytes of cache data transfers per request. The optimal thread address pattern for 1.2 byte accesses would result in 1.2*32 = 38.4 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","16.79"
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.8 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","4.878"
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","69,71",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,70",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","30,29",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,59",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","2,67",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","10,88",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","10,89",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","30,94",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","30,14",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","218.521,38",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","20.978.052",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","218.578,39",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","20.983.525",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Grid Size","","1.408",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","31",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Threads","thread","1.441.792",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","58,67",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","2",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","16",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","94,21",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","30,15",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,05",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.117.684",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","92,56",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","383,81",
"20","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_constant(const unsigned char *, unsigned char *, int, int)","21","147","(32, 32, 1)","(11, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 21415714 excessive sectors (90% of the total 23835268 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","85.91"
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,88",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,43",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","673.022",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","48,69",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","24,79",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","469,41",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","97,39",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","23,45",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","657.502,92",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","32,18",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1,29",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,26",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","32,19",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1,29",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","32,90",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (32.9%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","69,95",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","48,69",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","24,79",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","96,26",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","70,09",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","24,36",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.2 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 16.1 sectors per request, or 16.1*32 = 514.9 bytes of cache data transfers per request. The optimal thread address pattern for 1.2 byte accesses would result in 1.2*32 = 38.6 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","10.95"
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.2 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 16.0 sectors per request, or 16.0*32 = 512.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.2 byte accesses would result in 1.2*32 = 38.6 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","10.94"
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 3.1 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","1.832"
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","32,49",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,32",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","67,51",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,64",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0,64",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 3.1 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.64 active warps per scheduler, but only an average of 0.64 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","51.31"
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","23,52",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","23,53",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,87",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31,04",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 10.9 cycles being stalled waiting for the L1 instruction queue for local and global (LG) memory operations to be not full. Typically, this stall occurs only when executing local or global memory instructions extremely frequently. Avoid redundant global memory accesses. Try to avoid using thread-local memory by checking if dynamically indexed arrays are declared in local scope, of if the kernel has excessive register pressure causing by spills. If applicable, consider combining multiple lower-width memory operations into fewer wider memory operations and try interleaving memory operations and math instructions. This stall type represents about 46.4% of the total average of 23.5 cycles between issuing two instructions.","global","46.4"
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 8.3 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 35.2% of the total average of 23.5 cycles between issuing two instructions.","global","35.2"
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","211.568,98",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","20.310.622",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","211.632,48",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","20.316.718",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Grid Size","","1.024",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","35",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Threads","thread","1.048.576",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","42,67",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","1",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","16",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","94,93",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","30,38",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,05",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.052.174",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","99,17",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","42,65",
"21","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_constant(const unsigned char *, unsigned char *, int, int)","22","154","(32, 32, 1)","(8, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 28260882 excessive sectors (92% of the total 30553522 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","70.26"
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,99",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,46",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","1.893.518",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","71,69",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","8,84",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","msecond","1,29",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","77,01",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","9,80",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","1.758.265,88",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","71,69",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","INF","Compute and Memory are well-balanced: To reduce runtime, both computation and memory traffic must be reduced. Check both the Compute Workload Analysis and Memory Workload Analysis sections.","",""
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1,16",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,08",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","28,88",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1,16",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","28,88",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (21.7%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","25,40",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","35,96",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","71,69",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","68,98",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","87,87",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","71,69",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.1 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","5.283"
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.0 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request.","global","1.816"
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","29,72",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,30",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","70,28",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,75",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1,24",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 3.4 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.75 active warps per scheduler, but only an average of 1.24 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","28.31"
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","26,08",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","26,09",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,99",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","26,98",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","507.797,33",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","48.748.544",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","507.838,58",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","48.752.504",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Grid Size","","16.384",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","24",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","1,16",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Threads","thread","16.777.216",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","682,67",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","2",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","25",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","94,89",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","30,36",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,02",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.048.320",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","0",
"22","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_shared(const unsigned char *, unsigned char *, int, int)","23","161","(32, 32, 1)","(128, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","0",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,95",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,45",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","1.150.890",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","77,95",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","14,53",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","792,38",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","82,80",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","18,03",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","1.081.236,62",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","77,95",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","INF","Compute and Memory are well-balanced: To reduce runtime, both computation and memory traffic must be reduced. Check both the Compute Workload Analysis and Memory Workload Analysis sections.","",""
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1,20",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,13",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","30,05",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1,20",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","30,05",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (20.7%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","41,51",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","39,76",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","77,95",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","68,24",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","78,60",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","77,95",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 1.2 sectors per request, or 1.2*32 = 37.2 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","0.1593"
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 2.0 sectors per request, or 2.0*32 = 64.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","0.5713"
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.3 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","5.429"
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.0 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request.","global","3.98"
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","30,49",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,30",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","69,51",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,75",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1,28",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 3.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.75 active warps per scheduler, but only an average of 1.28 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","22.05"
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","25,42",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","25,42",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,98",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","26,76",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 8.3 cycles being stalled waiting for the MIO (memory input/output) instruction queue to be not full. This stall reason is high in cases of extreme utilization of the MIO pipelines, which include special math instructions, dynamic branches, as well as shared memory instructions. When caused by shared memory accesses, trying to use fewer but wider loads can reduce pipeline pressure. This stall type represents about 32.5% of the total average of 25.4 cycles between issuing two instructions.","global","22.05"
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","324.814,67",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","31.182.208",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","324.862,67",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","31.186.816",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Grid Size","","8.192",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","31",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","2,24",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Threads","thread","8.388.608",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","341,33",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","2",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","14",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","96,04",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","30,73",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,03",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","786.176",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","0",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","0",
"23","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance2_shared(const unsigned char *, unsigned char *, int, int)","24","168","(32, 32, 1)","(64, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 1080576 excessive sectors (21% of the total 5039234 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","20.94"
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,94",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,45",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","824.161",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","80,92",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","20,28",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","569,02",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","84,57",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","32,00",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","787.510,79",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","80,92",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1,28",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,22",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","31,89",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1,28",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","31,89",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (23.9%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","57,79",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","41,99",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","80,92",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","76,76",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","82,16",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","80,92",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 1.8 sectors per request, or 1.8*32 = 58.8 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","0.8306"
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 4.0 sectors per request, or 4.0*32 = 128.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","1.367"
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.1 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","4.209"
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","32,15",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,32",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","67,85",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,82",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1,32",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 3.1 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.82 active warps per scheduler, but only an average of 1.32 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","19.08"
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","24,33",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","24,34",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,97",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","26,73",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 8.2 cycles being stalled waiting for the MIO (memory input/output) instruction queue to be not full. This stall reason is high in cases of extreme utilization of the MIO pipelines, which include special math instructions, dynamic branches, as well as shared memory instructions. When caused by shared memory accesses, trying to use fewer but wider loads can reduce pipeline pressure. This stall type represents about 33.5% of the total average of 24.3 cycles between issuing two instructions.","global","19.08"
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","251.110,67",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","24.106.624",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","251.158,67",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","24.111.232",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Grid Size","","4.096",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","35",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","4,42",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Threads","thread","4.194.304",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","170,67",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","1",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","7",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","97,39",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","31,17",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,04",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","917.120",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","100",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","0",
"24","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance4_shared(const unsigned char *, unsigned char *, int, int)","25","175","(32, 32, 1)","(32, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 3241728 excessive sectors (56% of the total 5759298 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","54.18"
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,99",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,46",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","776.401",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","61,13",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","21,53",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","531,39",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","92,94",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","61,13",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","756.226,38",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","49,29",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","OPT","Memory is more heavily utilized than Compute: Look at the Memory Workload Analysis section to identify the L2 bottleneck. Check memory replay (coalescing) metrics to make sure you're efficiently utilizing the bytes transferred. Also consider whether it is possible to do more work per memory access (kernel fusion) or whether there are values you can (re)compute.","",""
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1,04",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,01",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","25,92",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1,04",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","25,92",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (22.0%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","61,88",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","54,88",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","61,13",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","87,10",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","89,30",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","49,29",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 4.1 sectors per request, or 4.1*32 = 129.9 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","2.371"
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.0 sectors per request, or 8.0*32 = 256.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","2.752"
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","2.754"
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","SharedMemoryConflicts","OPT","The memory access pattern for shared loads might not be optimal and causes on average a 2.0 - way bank conflict across all 1965120 shared load requests.This results in 1965120 bank conflicts,  which represent 50.00% of the overall 3930240 wavefronts for shared loads. Check the Source Counters section for uncoalesced shared loads.","global","46.47"
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","SharedMemoryConflicts","OPT","The memory access pattern for shared stores might not be optimal and causes on average a 1.8 - way bank conflict across all 683458 shared store requests.This results in 556544 bank conflicts,  which represent 44.88% of the overall 1240002 wavefronts for shared stores. Check the Source Counters section for uncoalesced shared stores.","global","41.71"
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","26,34",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,26",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","73,66",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,90",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0,71",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 3.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.90 active warps per scheduler, but only an average of 0.71 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","38.87"
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","29,98",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","29,99",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,94",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","30,61",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 11.1 cycles being stalled waiting for the MIO (memory input/output) instruction queue to be not full. This stall reason is high in cases of extreme utilization of the MIO pipelines, which include special math instructions, dynamic branches, as well as shared memory instructions. When caused by shared memory accesses, trying to use fewer but wider loads can reduce pipeline pressure. This stall type represents about 37.0% of the total average of 30.0 cycles between issuing two instructions.","global","37.03"
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","196.000",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","18.816.000",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","196.048",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","18.820.608",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Grid Size","","2.048",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","30",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","8,84",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Threads","thread","2.097.152",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","85,33",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","2",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","3",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","97,52",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","31,21",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,07",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.244.608",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","100",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","0",
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 7564032 excessive sectors (81% of the total 9361058 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","79.01"
"25","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance8_shared(const unsigned char *, unsigned char *, int, int)","26","182","(32, 32, 1)","(16, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedSharedAccess","OPT","This kernel has uncoalesced shared accesses resulting in a total of 2521664 excessive wavefronts (49% of the total 5170242 wavefronts). Check the L1 Wavefronts Shared Excessive table for the primary source locations. The CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#shared-memory-in-matrix-multiplication-c-aa) has an example on optimizing shared memory accesses.","global","47.58"
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,88",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,43",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","821.816",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","85,57",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","20,34",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","572,45",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","81,54",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","85,57",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","806.946",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","43,22",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing L2 in the Memory Workload Analysis section.","",""
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0,95",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0,93",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","23,64",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0,95",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","23,64",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (20.9%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","57,45",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","73,67",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","85,57",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","91,35",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","92,48",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","43,22",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 6.8 sectors per request, or 6.8*32 = 217.1 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","3.65"
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 11.6 sectors per request, or 11.6*32 = 372.4 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","3.913"
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","1.962"
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","23,95",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,24",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","76,05",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,76",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0,67",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 4.2 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.76 active warps per scheduler, but only an average of 0.67 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","14.43"
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","32,41",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","32,42",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","30,95",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","29,74",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 10.9 cycles being stalled waiting for the MIO (memory input/output) instruction queue to be not full. This stall reason is high in cases of extreme utilization of the MIO pipelines, which include special math instructions, dynamic branches, as well as shared memory instructions. When caused by shared memory accesses, trying to use fewer but wider loads can reduce pipeline pressure. This stall type represents about 33.7% of the total average of 32.4 cycles between issuing two instructions.","global","14.43"
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","190.678,29",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","18.305.116",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","190.726,29",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","18.309.724",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Grid Size","","1.408",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","38",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","13,12",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Threads","thread","1.441.792",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","58,67",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","1",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","2",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","95,93",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","30,70",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,07",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.248.692",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","93,94",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","341,17",
"26","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance12_shared(const unsigned char *, unsigned char *, int, int)","27","189","(32, 32, 1)","(11, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 11887352 excessive sectors (88% of the total 13488882 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","88.03"
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,97",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,45",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","1.443.696",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","64,32",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","11,58",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","991,14",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","84,63",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","64,32",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","1.421.113,17",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","22,53",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","OPT","Memory is more heavily utilized than Compute: Look at the Memory Workload Analysis section to identify the L2 bottleneck. Check memory replay (coalescing) metrics to make sure you're efficiently utilizing the bytes transferred. Also consider whether it is possible to do more work per memory access (kernel fusion) or whether there are values you can (re)compute.","",""
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0,50",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0,50",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","12,59",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0,50",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","12,59",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","88.57"
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","33,18",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","54,51",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","64,32",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","93,51",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","94,24",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","22,53",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 10.1 sectors per request, or 10.1*32 = 323.4 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","2.874"
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 16.0 sectors per request, or 16.0*32 = 512.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.0 byte accesses would result in 1.0*32 = 32.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","2.99"
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 3.0 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","0.9045"
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","SharedMemoryConflicts","OPT","The memory access pattern for shared loads might not be optimal and causes on average a 4.0 - way bank conflict across all 1768608 shared load requests.This results in 5305824 bank conflicts,  which represent 75.00% of the overall 7074432 wavefronts for shared loads. Check the Source Counters section for uncoalesced shared loads.","global","63.47"
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","SharedMemoryConflicts","OPT","The memory access pattern for shared stores might not be optimal and causes on average a 3.7 - way bank conflict across all 622048 shared store requests.This results in 1669632 bank conflicts,  which represent 72.86% of the overall 2291680 wavefronts for shared stores. Check the Source Counters section for uncoalesced shared stores.","global","61.66"
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","12,50",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,12",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","87,50",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,69",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0,27",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 8.0 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.69 active warps per scheduler, but only an average of 0.27 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","35.68"
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","61,56",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","61,58",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,99",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","30,78",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 25.4 cycles being stalled waiting for the MIO (memory input/output) instruction queue to be not full. This stall reason is high in cases of extreme utilization of the MIO pipelines, which include special math instructions, dynamic branches, as well as shared memory instructions. When caused by shared memory accesses, trying to use fewer but wider loads can reduce pipeline pressure. This stall type represents about 41.3% of the total average of 61.6 cycles between issuing two instructions.","global","35.68"
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 19.7 cycles being stalled waiting for the L1 instruction queue for local and global (LG) memory operations to be not full. Typically, this stall occurs only when executing local or global memory instructions extremely frequently. Avoid redundant global memory accesses. Try to avoid using thread-local memory by checking if dynamically indexed arrays are declared in local scope, of if the kernel has excessive register pressure causing by spills. If applicable, consider combining multiple lower-width memory operations into fewer wider memory operations and try interleaving memory operations and math instructions. This stall type represents about 31.9% of the total average of 61.6 cycles between issuing two instructions.","global","31.93"
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","178.853,67",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","17.169.952",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","178.901,67",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","17.174.560",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Grid Size","","1.024",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","48",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","17,48",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Threads","thread","1.048.576",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","42,67",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","1",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","1",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","97,59",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","31,23",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,07",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.146.336",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","100",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","0",
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 16208640 excessive sectors (92% of the total 17649488 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","88.45"
"27","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_load_balance16_shared(const unsigned char *, unsigned char *, int, int)","28","196","(32, 32, 1)","(8, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedSharedAccess","OPT","This kernel has uncoalesced shared accesses resulting in a total of 6975456 excessive wavefronts (74% of the total 9366112 wavefronts). Check the L1 Wavefronts Shared Excessive table for the primary source locations. The CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#shared-memory-in-matrix-multiplication-c-aa) has an example on optimizing shared memory accesses.","global","73.44"
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,94",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,45",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","1.009.570",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","80,17",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","16,56",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","696,96",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","85,84",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","13,86",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","941.151,25",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","80,17",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1,42",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,32",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","35,39",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1,42",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","35,39",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (27.8%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","47,18",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","40,20",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","80,17",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","59,57",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","70,43",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","80,17",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.1 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 2.0 sectors per request, or 2.0*32 = 64.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.1 byte accesses would result in 1.1*32 = 35.7 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","0.453"
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 1.3 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","6.179"
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.0 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request.","global","2.268"
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","35,86",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,36",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","64,14",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,76",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1,40",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.76 active warps per scheduler, but only an average of 1.40 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","19.83"
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","21,64",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","21,64",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,98",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","26,38",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 7.0 cycles being stalled waiting for the MIO (memory input/output) instruction queue to be not full. This stall reason is high in cases of extreme utilization of the MIO pipelines, which include special math instructions, dynamic branches, as well as shared memory instructions. When caused by shared memory accesses, trying to use fewer but wider loads can reduce pipeline pressure. This stall type represents about 32.5% of the total average of 21.6 cycles between issuing two instructions.","global","19.83"
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","333.045,31",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","31.972.350",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","333.093,31",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","31.976.958",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Grid Size","","8.192",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","32",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","2,24",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Threads","thread","8.388.608",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","341,33",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","2",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","14",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","96,28",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","30,81",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,03",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.052.286",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","98,44",
"28","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized2_shared(unsigned char *, unsigned char *, int, int)","29","203","(32, 32, 1)","(64, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","42,65",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,94",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,45",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","672.087",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","79,72",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","24,82",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","463,26",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","84,05",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","17,41",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","636.477,79",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","79,72",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","INF","Compute and Memory are well-balanced: To reduce runtime, both computation and memory traffic must be reduced. Check both the Compute Workload Analysis and Memory Workload Analysis sections.","",""
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1,64",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,55",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","40,97",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1,64",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","40,97",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (38.2%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","70,81",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","39,93",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","79,72",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","46,83",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","63,14",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","79,72",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.3 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 1.3 sectors per request, or 1.3*32 = 40.5 bytes of cache data transfers per request. The optimal thread address pattern for 1.3 byte accesses would result in 1.3*32 = 40.2 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","0.007347"
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.3 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 4.0 sectors per request, or 4.0*32 = 128.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.3 byte accesses would result in 1.3*32 = 40.2 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","0.6704"
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.1 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","5.161"
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","41,42",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,41",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","58,58",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,79",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1,76",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.4 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.79 active warps per scheduler, but only an average of 1.76 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","20.28"
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","18,80",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","18,81",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,96",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","26,75",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 5.8 cycles being stalled waiting for the MIO (memory input/output) instruction queue to be not full. This stall reason is high in cases of extreme utilization of the MIO pipelines, which include special math instructions, dynamic branches, as well as shared memory instructions. When caused by shared memory accesses, trying to use fewer but wider loads can reduce pipeline pressure. This stall type represents about 30.6% of the total average of 18.8 cycles between issuing two instructions.","global","20.28"
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","260.705,98",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","25.027.774",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","260.753,98",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","25.032.382",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Grid Size","","4.096",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","37",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","4,42",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Threads","thread","4.194.304",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","170,67",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","1",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","7",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","96,87",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","31,00",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,04",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.052.222",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","98,96",
"29","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized4_shared(unsigned char *, unsigned char *, int, int)","30","210","(32, 32, 1)","(32, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","42,65",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,95",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,45",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","593.044",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","53,12",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","28,10",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","408,32",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","92,50",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","18,66",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","571.364,88",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","53,12",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1,42",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,37",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","35,41",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1,42",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","35,41",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (35.3%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","80,31",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","46,25",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","53,12",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","58,04",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","58,89",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","53,12",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.2 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 2.1 sectors per request, or 2.1*32 = 68.4 bytes of cache data transfers per request. The optimal thread address pattern for 1.2 byte accesses would result in 1.2*32 = 39.1 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","0.5421"
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.2 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 8.0 sectors per request, or 8.0*32 = 256.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.2 byte accesses would result in 1.2*32 = 39.1 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","1.072"
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","3.603"
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","SharedMemoryConflicts","OPT","The memory access pattern for shared loads might not be optimal and causes on average a 2.0 - way bank conflict across all 1965120 shared load requests.This results in 1965120 bank conflicts,  which represent 50.00% of the overall 3930240 wavefronts for shared loads. Check the Source Counters section for uncoalesced shared loads.","global","46.25"
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","SharedMemoryConflicts","OPT","The memory access pattern for shared stores might not be optimal and causes on average a 1.8 - way bank conflict across all 683458 shared store requests.This results in 556544 bank conflicts,  which represent 44.88% of the overall 1240002 wavefronts for shared stores. Check the Source Counters section for uncoalesced shared stores.","global","41.52"
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","35,70",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,36",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","64,30",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,84",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1,18",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.84 active warps per scheduler, but only an average of 1.18 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","46.88"
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","21,97",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","21,98",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,93",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","30,64",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 7.9 cycles being stalled waiting for the MIO (memory input/output) instruction queue to be not full. This stall reason is high in cases of extreme utilization of the MIO pipelines, which include special math instructions, dynamic branches, as well as shared memory instructions. When caused by shared memory accesses, trying to use fewer but wider loads can reduce pipeline pressure. This stall type represents about 35.7% of the total average of 22.0 cycles between issuing two instructions.","global","35.74"
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","202.289,48",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","19.419.790",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","202.337,48",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","19.424.398",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Grid Size","","2.048",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","35",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","8,84",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Threads","thread","2.097.152",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","85,33",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","1",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","3",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","97,68",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","31,26",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,07",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.314.206",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","99,31",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","42,65",
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 1080576 excessive sectors (38% of the total 2877602 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","33.4"
"30","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized8_shared(unsigned char *, unsigned char *, int, int)","31","217","(32, 32, 1)","(16, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedSharedAccess","OPT","This kernel has uncoalesced shared accesses resulting in a total of 2521664 excessive wavefronts (49% of the total 5170242 wavefronts). Check the L1 Wavefronts Shared Excessive table for the primary source locations. The CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#shared-memory-in-matrix-multiplication-c-aa) has an example on optimizing shared memory accesses.","global","47.06"
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","5,92",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,44",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","423.902",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","67,29",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","39,28",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","293,82",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","69,79",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","24,63",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","408.306,58",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","67,29",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","INF","Compute and Memory are well-balanced: To reduce runtime, both computation and memory traffic must be reduced. Check both the Compute Workload Analysis and Memory Workload Analysis sections.","",""
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1,94",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1,87",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","48,47",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1,94",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","50,98",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","ALU is the highest-utilized pipeline (51.0%) based on active cycles, taking into account the rates of its different instructions. It executes integer and logic operations. It is well-utilized, but should not be a bottleneck.","",""
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","111,66",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","34,22",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","67,29",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","68,74",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","56,21",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","67,29",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.3 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 3.4 sectors per request, or 3.4*32 = 109.9 bytes of cache data transfers per request. The optimal thread address pattern for 1.3 byte accesses would result in 1.3*32 = 40.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","1.464"
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.3 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 11.7 sectors per request, or 11.7*32 = 374.3 bytes of cache data transfers per request. The optimal thread address pattern for 1.3 byte accesses would result in 1.3*32 = 40.0 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","2.057"
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","3.805"
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","48,70",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,49",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","51,30",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,74",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","2,17",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.1 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.74 active warps per scheduler, but only an average of 2.17 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","32.71"
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","15,90",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","15,90",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","30,95",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","29,78",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","197.844,81",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","18.993.102",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","197.892,81",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","18.997.710",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Grid Size","","1.408",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","39",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","13,12",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Threads","thread","1.441.792",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","58,67",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","1",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","2",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","96,81",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","30,98",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,07",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.297.820",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","93,71",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","383,81",
"31","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized12_shared(unsigned char *, unsigned char *, int, int)","32","224","(32, 32, 1)","(11, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 2169594 excessive sectors (58% of the total 3745798 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","51.44"
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","6,05",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","cycle/nsecond","1,47",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","912.868",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","48,43",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","18,31",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","usecond","617,34",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","96,85",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","15,36",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","889.824,50",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","25,56",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0,90",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0,87",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","22,38",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0,90",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","22,38",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","83.81"
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","Gbyte/second","53,17",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","48,43",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","25,56",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","73,88",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","67,71",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","25,56",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 1.3 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 11.2 sectors per request, or 11.2*32 = 358.4 bytes of cache data transfers per request. The optimal thread address pattern for 1.3 byte accesses would result in 1.3*32 = 41.5 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads.","global","1.11"
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 1.3 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 16.0 sectors per request, or 16.0*32 = 512.0 bytes of cache data transfers per request. The optimal thread address pattern for 1.3 byte accesses would result in 1.3*32 = 41.5 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores.","global","1.153"
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 3.0 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request.","global","1.432"
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","SharedMemoryConflicts","OPT","The memory access pattern for shared loads might not be optimal and causes on average a 4.0 - way bank conflict across all 1768608 shared load requests.This results in 5305824 bank conflicts,  which represent 75.00% of the overall 7074432 wavefronts for shared loads. Check the Source Counters section for uncoalesced shared loads.","global","72.64"
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","SharedMemoryConflicts","OPT","The memory access pattern for shared stores might not be optimal and causes on average a 3.7 - way bank conflict across all 622048 shared store requests.This results in 1669632 bank conflicts,  which represent 72.86% of the overall 2291680 wavefronts for shared stores. Check the Source Counters section for uncoalesced shared stores.","global","70.56"
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","22,46",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0,22",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","No Eligible","%","77,54",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7,80",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0,55",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 4.5 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.80 active warps per scheduler, but only an average of 0.55 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","51.57"
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","34,72",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","34,73",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","31,99",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","30,90",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 20.1 cycles being stalled waiting for the MIO (memory input/output) instruction queue to be not full. This stall reason is high in cases of extreme utilization of the MIO pipelines, which include special math instructions, dynamic branches, as well as shared memory instructions. When caused by shared memory accesses, trying to use fewer but wider loads can reduce pipeline pressure. This stall type represents about 57.9% of the total average of 34.7 cycles between issuing two instructions.","global","51.57"
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","199.109,81",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","19.114.542",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","199.162,35",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","19.119.586",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Block Size","","1.024",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Grid Size","","1.024",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","32",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","Kbyte","32,77",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","17,48",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Threads","thread","1.048.576",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Launch Statistics","Waves Per SM","","42,67",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit Registers","block","2",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","1",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Block Limit Warps","block","1",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Achieved Occupancy","%","97,07",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","31,06",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0,06",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Branch Instructions","inst","1.183.182",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Branch Efficiency","%","99,26",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","42,65",
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 3241728 excessive sectors (74% of the total 4387808 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","47.87"
"32","2372","optimizing-convolution.exe","127.0.0.1","k_1D_gf_3x3_vectorized16_shared(unsigned char *, unsigned char *, int, int)","33","231","(32, 32, 1)","(8, 128, 1)","0","7.5","SourceCounters","","","","UncoalescedSharedAccess","OPT","This kernel has uncoalesced shared accesses resulting in a total of 6975456 excessive wavefronts (74% of the total 9366112 wavefronts). Check the L1 Wavefronts Shared Excessive table for the primary source locations. The CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#shared-memory-in-matrix-multiplication-c-aa) has an example on optimizing shared memory accesses.","global","72.79"
